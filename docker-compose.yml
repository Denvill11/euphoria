version: '3.8'

services:
  app:
    image: ${DOCKERHUB_USERNAME}/euphoria:latest
    restart: always
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6380
      - EMAILER_USER=${EMAILER_USER}
      - EMAILER_PASSWORD=${EMAILER_PASSWORD}
      - REDIS_APPROVE_KEY=${REDIS_APPROVE_KEY}
      - REDIS_TTL=${REDIS_TTL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - SALT_ROUNDS=${SALT_ROUNDS}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    volumes:
      - ./uploads:/app/uploads
    networks:
      - gastro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gastro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "127.0.0.1:6380:6379"  # Only allow local connections
    volumes:
      - redis_data:/data
    networks:
      - gastro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:

networks:
  gastro-network:
    driver: bridge
  