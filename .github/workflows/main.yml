name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      env:
        NODE_ENV: test
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
        DADATA_TOKEN: 'test-token'
        DADATA_URL: 'https://api.dadata.ru/v2/suggest/party'
      run: npm test
      
    - name: Run linter
      run: npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/euphoria:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/euphoria:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/euphoria:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/euphoria:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Copy deployment files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker-compose.prod.yml,.env.example"
        target: "/opt/euphoria"
        strip_components: 0

    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Перейти в директорию приложения
          cd /opt/euphoria
          
          # Переименовать новый docker-compose файл
          if [ -f docker-compose.prod.yml ]; then
            cp docker-compose.prod.yml docker-compose.yml
          fi
          
          # Проверить наличие .env файла
          if [ ! -f .env ]; then
            echo "Error: .env file not found!"
            exit 1
          fi
          
          # Остановить старые контейнеры
          docker-compose down --remove-orphans
          
          # Получить новый образ
          docker-compose pull app
          
          # Запустить новые контейнеры
          docker-compose up -d
          
          # Проверить статус
          docker-compose ps
          
          # Очистить неиспользуемые образы
          docker image prune -f
          
          # Проверить логи на наличие ошибок
          docker-compose logs app --tail=50
          
          # Проверить health check
          sleep 30
          if ! curl -s http://localhost:3001/api/health > /dev/null; then
            echo "Health check failed!"
            docker-compose logs app --tail=100
            exit 1
          fi 