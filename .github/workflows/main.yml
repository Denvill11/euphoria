name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      env:
        NODE_ENV: test
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
        DADATA_TOKEN: 'test-token'
        DADATA_URL: 'https://api.dadata.ru/v2/suggest/party'
      run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/euphoria:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/euphoria:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/euphoria:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/euphoria:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup deployment directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Создаем необходимые директории
          mkdir -p ~/euphoria
          mkdir -p ~/euphoria/uploads
          
          # Устанавливаем правильные права доступа
          if sudo -n true 2>/dev/null; then
            # Если sudo доступен без пароля
            sudo chown -R $USER:$USER ~/euphoria
            sudo chmod -R 755 ~/euphoria
            sudo chmod -R 775 ~/euphoria/uploads
          else
            # Если sudo недоступен, пробуем без него
            chmod -R 755 ~/euphoria
            chmod -R 775 ~/euphoria/uploads
          fi
          
          # Проверяем результат
          ls -la ~/euphoria
    
    - name: Copy deployment files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker-compose.prod.yml,.env.example"
        target: "~/euphoria"
        strip_components: 0

    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Перейти в директорию приложения
          cd ~/euphoria
          
          # Переименовать новый docker-compose файл
          if [ -f docker-compose.prod.yml ]; then
            cp docker-compose.prod.yml docker-compose.yml
          fi
          
          # Создать .env файл с переменными окружения
          cat > .env << EOL
          # Server Configuration
          PORT=3000
          NODE_ENV=production

          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}

          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=24h

          # Encryption Configuration
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

          # DaData Configuration
          DADATA_TOKEN=${{ secrets.DADATA_TOKEN }}
          DADATA_URL=${{ secrets.DADATA_URL }}

          # Docker Configuration
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

          # File Upload Configuration
          UPLOAD_DESTINATION=./uploads
          EOL
          
          # Остановить старые контейнеры
          docker-compose down --remove-orphans
          
          # Получить новый образ
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose pull app
          
          # Запустить новые контейнеры
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose up -d
          
          # Проверить статус
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose ps
          
          # Очистить неиспользуемые образы
          docker image prune -f
          
          # Проверить логи на наличие ошибок
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs app --tail=50
          
          # Проверить health check
          sleep 30
          if ! curl -s http://localhost:3001/api/health > /dev/null; then
            echo "Health check failed!"
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker-compose logs app --tail=100
            exit 1
          fi 